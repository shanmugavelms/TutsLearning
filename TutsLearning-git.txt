---------------------------------------------------------------------------git -----------------------------------------------------------------------------

configurations:

git config --global user.name ="vel"
user.emai
core.editer
color.ui true

git config --list

git init

git log

git log -n 2 --to show 2 commits

git log --since=2013-12-29

git log --until=

git log --author="vel"

git log --grep="text"


working -> staging index -> repo

git status

git diff

git rm filename.txt , then commit

git mv file1 file2

git commit -am "msg"  ---to skip add . >>>use only for file modifications/ not for file add or remove

git checkout -- file/folder --- double dash indicates its file or folder( checkout is multipurpose cmd as it is used for branches)

undo changes --unstagging files - git reset HEAD filename

git commit --amend -m "text" -- undoing changes in commit(last commit)

git revert shavalue of the commit

git reset - soft,mixed,hard

git clean

add .gitignore file to ignore the files-- *.csv,!test.csv ....folders
--- ignore compiled source code,packages, logs,compressed files etc


ignoring files globally - git config --global core.excludesfile path of .gitignore_globale file


!!!!!!!!!!!!!!!!!!!!!! . refers to curent dir  .. refers to previous dir in unix (ls al) !!!!!!!!!!!!!!!!!!!!!!!!!!

tracking empty directories - add empty file in it....eg .gitkeep

viewing commit information - git show sha ID

creating branch - git branch new_feature

switching branch - git checkout brancn name

creating and switching branch - git checkout -b shorten_title

comparing branches - git diff --color-words new_feature..shorten_title , git branch --merged

renaming the branch - git branch -m name name2

deleting branch -git branch -d branch_to_delete

merging - git merge branchname ...git merge -no-ff branchname

--no-ff -----no fast forward because the merge does not have new commit(no details in log)

resolving merge conflit ---> after clearing error give git commit only
--- merge often to avoid conflicts

stashing - temp storing - git stach save "msg"

git stash list
git stash pop stach@{0}


create the repo in github
in git bash -> git remote -> git remote add origin https://github.com/shanmugavelms/TutsLearning.git
git pull -u origin master ----u for tracking

git remote rm  origin - for removing



git clone url
git fetch origin master

git pull = git fetch + git merge


A tag, is created to point to a specific commit and thereafter does not change, even if the branch moves on. In other words, tags are immutable references.


git tag --list all tag

git tag -l 'v1.4.2.*' --filtering tags

lightweight tag -- pointer to specific commit
annotated tag -- more info

git tag -a v1.0 -m 'my version'

git show v1.0 - get info abt tag

git push origin [tagname] -- for single tag

git push origin --tags  -- for many tags

fetching tags -- git fetch --tags or git fetch tagname


git diff HEAD    ---Diff between HEAD and the working directory.
git diff HEAD^   --- Diff between the direct ancestor of HEAD and the working directory.
git diff --cached or the synonym git diff --staged --Diff between HEAD and the index.
git diff - Diff between the index and the working directory.